# -*- coding: utf-8 -*-
"""Chaos_in_a_double_pendulum.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15iePtrEDraiKXMbzdgcrYUJzLxhCF5sM
"""

#!sudo apt install imagemagick

import matplotlib.pyplot as plt
import numpy as np
from scipy import integrate
from matplotlib import animation

#pendulum 1 constants
omega1_0 = 0 # initial position
theta1_0 = np.pi/4 # initial velocity

#pendulum 2 constants
omega2_0 = 0 # initial position
theta2_0 = np.pi/4 + 0.01 # initial velocity
y0 = np.array([theta1_0, omega1_0, theta2_0, omega2_0]) # initial state

#universal contants
m = 5        # m1 = m2 = m
L = 1        # L1 = L2 = L
g = 9.81
t0 = 0 # initial time
tf = 10*np.pi # final time
print('Please input the number of points')
n = int(input())          # Number of points at which output will be evaluated
t = np.linspace(t0, tf, n)    # Points at which output will be evaluated

def double_pendulum(t,y,m,L,g):
  theta1, omega1,theta2, omega2 = y
  delta = theta2 - theta1
  dtheta1_dt = omega1
  domega1_dt = (-g*(2*np.sin(theta1) + np.sin(theta1 - 2*theta2)) - 2*np.sin(delta)*(omega2**2*L + omega1**2*L*np.cos(delta)))/(L*(2 - np.cos(2*delta)))

  dtheta2_dt = omega2
  domega2_dt = (2*np.sin(delta)*(omega1**2*L*(1 + np.cos(delta))+g*np.cos(theta1)+omega2**2*L*np.cos(delta)))/(L*(2 - np.cos(2*delta)))
  dydt = np.array([dtheta1_dt, domega1_dt, dtheta2_dt, domega2_dt])
  return dydt

result = integrate.solve_ivp(fun = double_pendulum, t_span = (t0, tf), y0 = y0,method = "RK45", t_eval = t, args = (m,L,g))

theta1, omega1, theta2, omega2 = result.y
t = result.t

# Calculate Cartesian coordinates for visualization
x1 = L * np.sin(theta1)
y1 = -L * np.cos(theta1)
x2 = x1 + L * np.sin(theta2)
y2 = y1 - L * np.cos(theta2)

# Plot the results
plt.plot(t, theta1, label=r"$\theta_1$")
plt.plot(t, omega1, label=r"$\omega_1$")
plt.plot(t, theta2, label=r"$\theta_2$")
plt.plot(t, omega2, label=r"$\omega_2$")
plt.legend(loc=1)
plt.xlabel("Time")
plt.ylabel("State Variables")
plt.title("Double Pendulum Simulation")
plt.savefig('Double_Pendulum_Simulation.png')
plt.show()

fig1 = plt.figure(figsize=(6, 6))
plt.plot(t, theta1, label=r"$\theta_1$")
plt.plot(t, theta2, label=r"$\theta_2$")
plt.ylabel(r'Angle (theta),  $\theta$ (rad.)', fontsize=14)
plt.xlabel(r'Time, t (s)', fontsize=14)
plt.title("Angular Position")
plt.legend()
plt.savefig('Angular_position_of_the_pendulums.png')
plt.show()

fig2 = plt.figure(figsize=(6, 6))
plt.plot(omega1, theta1)
plt.ylabel(r'Angle (omega),  $\theta$ (rad.)', fontsize=14)
plt.xlabel(r'Time, t (s)', fontsize=14)
plt.title("Phase Space (1st Pendulum)")
plt.savefig('1st_pendulum_phase_space.png')
plt.show()

fig2 = plt.figure(figsize=(6, 6))
plt.plot(omega2, theta2)
plt.ylabel(r'Angle (omega),  $\theta$ (rad.)', fontsize=14)
plt.xlabel(r'Time, t (s)', fontsize=14)
plt.title("Phase Space (2nd Pendulum)")
plt.savefig('2nd_pendulum_phase_space.png')
plt.show()

fig1 = plt.figure(figsize=(6, 6))
plt.plot(t, x1, label=r"x1")
plt.plot(t, x2, label=r"x2")
plt.ylabel(r'Horizontal position (x)', fontsize=14)
plt.xlabel(r'Time, t (s)', fontsize=14)
plt.title("Horizontal Position")
plt.legend()
plt.savefig('Horizontal_position.png')
plt.show()

fig1 = plt.figure(figsize=(6, 6))
plt.plot(t, y1, label=r"x1")
plt.plot(t, y2, label=r"x2")
plt.ylabel(r'Vertical position (y)', fontsize=14)
plt.xlabel(r'Time, t (s)', fontsize=14)
plt.title("Vertical Position")
plt.legend()
plt.savefig('Vertical_position.png')
plt.show()

fig = plt.figure()
ax = fig.add_subplot(111, aspect='equal', autoscale_on=False,
                     xlim=(-2, 2), ylim=(-2, 2))
ax.set_xlabel(r'$x$')
ax.set_ylabel(r'$y$')
ax.set_title('Double Pendulum')
ax.grid()

line, = ax.plot([], [], 'o-', lw=2)

def init():
    line.set_data([], [])
    return line,

def animate(i):
    currentx = [0, x1[i], x2[i]]
    currenty = [0, y1[i], y2[i]]
    line.set_data(currentx, currenty)
    return line,

anim = animation.FuncAnimation(fig, animate, init_func=init,
                               frames=100, interval=20, blit=True)
anim.save('double_pendulum.gif', writer='imagemagick', fps=30)
plt.show()